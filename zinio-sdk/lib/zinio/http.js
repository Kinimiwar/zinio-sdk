//@ sourceMappingURL=http.map
// Generated by CoffeeScript 1.6.1
var Buffer, Http, Util, exceptions, http, https, querystring, request;

http = require('http');

https = require('https');

request = require("request");

querystring = require('querystring');

Buffer = require('buffer').Buffer;



exceptions = require('./exceptions');

Util = require('./util').Util;

Http = (function() {

  function Http(config) {
    this.config = config;
  }

  Http.prototype["delete"] = function(url, headers, callback) {
    return this.request('DELETE', url, headers, null, callback);
  };

  Http.prototype.get = function(url, headers, callback) {
    return this.request('GET', url, headers, null, callback);
  };

  Http.prototype.post = function(url, headers, body, callback) {
    return this.request('POST', url, headers, body, callback);
  };

  Http.prototype.put = function(url, headers, body, callback) {
    return this.request('PUT', url, headers, body, callback);
  };

  Http.prototype.request = function(method, url, headers, body, callback) {
    console.log('request url', url);

    var request_headers = { 'Content-Type': 'application/json' };
    if(headers)
      params = Object.assign(request_headers, headers);
    var options = {
      headers: request_headers,
      uri: url,
      method: method
    };
    if(body)
      options = Object.assign(options, {json: body});
      console.log('http options', options);
    request(options, function (err, res, api_response) {
      if(err){
        console.log('zinio api error');
        return callback(err, null);
      }else{
        return callback(null, api_response);
      }
    });
  };

  return Http;

})();

exports.Http = Http;
